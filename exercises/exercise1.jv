// This Jayvee model describes a pipeline from a CSV file to a SQLite file sink.

pipeline AirportsPipeline {

    // We describe the structure of the pipeline, usually at the top of the pipeline.
    // by connecting blocks via pipes. 
    AirportsExtractor -> AirportsTextFileInterpreter;

    // The output of the preceding block is hereby used as input for the succeeding block.
    AirportsTextFileInterpreter
        -> AirportsCSVInterpreter 
        -> AirportsTableInterpreter
        -> AirportsLoader;


    // Below the pipes, we usually define the blocks that are connected by the pipes.
    block AirportsExtractor oftype LocalFileExtractor {
        filePath: "rhein-kreis-neuss-flughafen-weltweit.csv";
    }

    block AirportsTextFileInterpreter oftype TextFileInterpreter {}

    // Next, we interpret the text file as sheet.
    // A sheet only contains text cells and is useful for manipulating the shape of data,
    //before assigning more strict value types to cells.
    block AirportsCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // Next, we interpret the sheet as a table by adding structure.
    // We define a valuetype per column that specifies the data type of the column.
    // Rows that include values that are not valid according to the their valuetypes are dropped automatically. 
    block AirportsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "Lfd. Nummer" oftype integer,
            "Name des Flughafens" oftype text,
            "Ort" oftype text,
            "Land" oftype text,
            "IATA" oftype text,
            "ICAO" oftype text,
            "Latitude" oftype decimal,
            "Longitude" oftype decimal,
            "Altitude" oftype integer,
            "Zeitzone" oftype decimal,
            "DST" oftype text,
            "Zeitzonen-Datenbank" oftype text,
            "geo_punkt" oftype text
        ];
    }

    // As a last step, we load the table into a sink,
    // here into a sqlite file.
    // The structural information of the table is used to generate the correct table.
    block AirportsLoader oftype SQLiteLoader { 
        table: "airports";
        file: "./airports.sqlite";
        }


}